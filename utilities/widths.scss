/**
 * $WIDTHS
 * ==========================================================================
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions, most commonly the grid system.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
@mixin grid-setup($namespace: "") {
    .#{$namespace}span-12         { width:100%; }
    .#{$namespace}span-11         { width:91.666667%; }
    .#{$namespace}span-10         { width:83.333333%; }
    .#{$namespace}span-9          { width:75%; }
    .#{$namespace}span-8          { width:66.666667%; }
    .#{$namespace}span-7          { width:58.333333%; }
    .#{$namespace}span-6          { width:50%; }
    .#{$namespace}span-5          { width:41.666667%; }
    .#{$namespace}span-4          { width:33.333333%; }
    .#{$namespace}span-3          { width:25%; }
    .#{$namespace}span-2          { width:16.666667%; }
    .#{$namespace}span-1          { width:8.3333333%; }
}
@include grid-setup();

/**
 * If you have set responsive to true in "arrange/_config.scss" then you now have
 * access to these classes. You can define at which breakpoint youâ€™d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="grid__item  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a "div" that, at "desktop" sizes, takes up a quarter of the
 * horizontal space, a half of that space at "tablet" sizes, and goes full width
 * at "mobile" sizes.
 */
@if $responsive == true{

	@include media-query(palm){
	    @include grid-setup("palm-");
	}

	@include media-query(portable){
	    @include grid-setup("lap-");
	}

	@include media-query(desk){
	    @include grid-setup("desk-");
	}

}